###################### Creating an Isolated Environment ###############################

If you would like to work in an isolated environment (which is strongly recom‐
mended so you can work on different projects without having conflicting library ver‐
sions), install virtualenv by running the following pip command:

$ pip3 install --user --upgrade virtualenv

Collecting virtualenv
[...]
Successfully installed virtualenv

Now you can create an isolated Python environment by typing:

$ cd $ML_PATH
$ virtualenv env
Using base prefix '[...]'
New python executable in [...]/ml/env/bin/python3.5
Also creating executable in [...]/ml/env/bin/python
Installing setuptools, pip, wheel...done.

Now every time you want to activate this environment, just open a terminal and type:

$ cd $ML_PATH
$ source env/bin/activate

While the environment is active, any package you install using pip will be installed in
this isolated environment, and Python will only have access to these packages (if you
also want access to the system’s site packages, you should create the environment
using virtualenv’s --system-site-packages option).
For more information https://python-guide-pt-br.readthedocs.io/en/latest/dev/virtualenvs/
